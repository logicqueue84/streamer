{"ast":null,"code":"var _jsxFileName = \"/Users/peng2017/Desktop/training/react/streamer/client/src/components/streams/StreamEdit.js\";\nimport React from 'react';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport StreamForm from './StreamForm';\nimport { fetchStream, editStream } from '../../actions';\n\nclass StreamEdit extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onSubmit = formValues => {\n      this.props.editStream(this.props.match.params.id, formValues);\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchStream(this.props.match.params.id);\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 14\n        }\n      }, \"Loading...\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }, \"Edit a Stream\"), /*#__PURE__*/React.createElement(StreamForm, {\n      initialValues: _.pick(this.props.stream, 'title', 'description'),\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\n;\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream,\n  editStream\n})(StreamEdit);","map":{"version":3,"sources":["/Users/peng2017/Desktop/training/react/streamer/client/src/components/streams/StreamEdit.js"],"names":["React","_","connect","StreamForm","fetchStream","editStream","StreamEdit","Component","onSubmit","formValues","props","match","params","id","componentDidMount","render","stream","pick","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,SAAQC,WAAR,EAAqBC,UAArB,QAAsC,eAAtC;;AACA,MAAMC,UAAN,SAAyBN,KAAK,CAACO,SAA/B,CAAwC;AAAA;AAAA;;AAAA,SAKxCC,QALwC,GAK5BC,UAAD,IAAe;AACtB,WAAKC,KAAL,CAAWL,UAAX,CAAsB,KAAKK,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA9C,EAAkDJ,UAAlD;AACH,KAPuC;AAAA;;AAExCK,EAAAA,iBAAiB,GAAE;AACf,SAAKJ,KAAL,CAAWN,WAAX,CAAuB,KAAKM,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C;AACH;;AAIDE,EAAAA,MAAM,GAAE;AACN,QAAG,CAAC,KAAKL,KAAL,CAAWM,MAAf,EAAuB;AACnB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH;;AACD,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,eAEI,oBAAC,UAAD;AAAY,MAAA,aAAa,EAAGf,CAAC,CAACgB,IAAF,CAAO,KAAKP,KAAL,CAAWM,MAAlB,EAAyB,OAAzB,EAAiC,aAAjC,CAA5B;AAA6E,MAAA,QAAQ,EAAE,KAAKR,QAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADF;AAQD;;AApBuC;;AAsBvC;;AACD,MAAMU,eAAe,GAAG,CAACC,KAAD,EAAOC,QAAP,KAAmB;AAC3C,SAAO;AAACJ,IAAAA,MAAM,EAAEG,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACT,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAT,GAAP;AACC,CAFD;;AAGA,eAAeX,OAAO,CAACgB,eAAD,EAAiB;AAACd,EAAAA,WAAD;AAAaC,EAAAA;AAAb,CAAjB,CAAP,CAAkDC,UAAlD,CAAf","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport {connect} from 'react-redux';\nimport StreamForm from './StreamForm';\n\nimport {fetchStream, editStream} from '../../actions';\nclass StreamEdit extends React.Component{\n\ncomponentDidMount(){\n    this.props.fetchStream(this.props.match.params.id);\n}\nonSubmit = (formValues) =>{\n    this.props.editStream(this.props.match.params.id, formValues);\n}\nrender(){ \n  if(!this.props.stream) {\n      return <div>Loading...</div>\n  }\n  return (\n    <div>\n        <h3>Edit a Stream</h3>\n        <StreamForm initialValues= {_.pick(this.props.stream,'title','description')} onSubmit={this.onSubmit}/>\n    </div>\n );\n    \n    \n};   \n\n};\nconst mapStateToProps = (state,ownProps) =>{\nreturn {stream: state.streams[ownProps.match.params.id]}\n};\nexport default connect(mapStateToProps,{fetchStream,editStream})(StreamEdit);"]},"metadata":{},"sourceType":"module"}