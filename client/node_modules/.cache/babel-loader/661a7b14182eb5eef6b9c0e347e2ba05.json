{"ast":null,"code":"var _jsxFileName = \"/Users/peng2017/Desktop/training/react/streamer/client/src/components/streams/StreamForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\n\nclass StreamForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }\n      }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }\n      }, this.renderError(meta)));\n    };\n\n    this.onSubmit = formValues => {\n      this.props.onSubmit(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ui error message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 17\n        }\n      }, error));\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"must enter a description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'StreamForm',\n  validate\n})(StreamForm);","map":{"version":3,"sources":["/Users/peng2017/Desktop/training/react/streamer/client/src/components/streams/StreamForm.js"],"names":["React","Field","reduxForm","connect","StreamForm","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","render","handleSubmit","validate","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,SAAf,QAA+B,YAA/B;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAGA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAwC;AAAA;AAAA;;AAAA,SAgBxCC,WAhBwC,GAgB1B,CAAC;AAACC,MAAAA,KAAD;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAD,KAA2B;AAErC,YAAMC,SAAS,GAAE,SAAQD,IAAI,CAACE,KAAL,IAAYF,IAAI,CAACG,OAAjB,GAA0B,OAA1B,GAAoC,EAAG,EAAhE;AACA,0BACI;AAAK,QAAA,SAAS,EAAIF,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQF,KAAR,CAFJ,eAGA,+CAAUD,KAAV;AAAiB,QAAA,YAAY,EAAC,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHA,eAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,KAAKM,WAAL,CAAiBJ,IAAjB,CAAN,CAJA,CADJ;AAQH,KA3BuC;;AAAA,SA6BxCK,QA7BwC,GA6B7BC,UAAU,IAAK;AAC1B,WAAKC,KAAL,CAAWF,QAAX,CAAoBC,UAApB;AACC,KA/BuC;AAAA;;AAEpCF,EAAAA,WAAW,CAAC;AAACF,IAAAA,KAAD;AAAOC,IAAAA;AAAP,GAAD,EACf;AAGI,QAAGA,OAAO,IAAED,KAAZ,EAAkB;AACd,0BACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBA,KAAzB,CADJ,CADJ;AAMH;AAEJ;;AAiBGM,EAAAA,MAAM,GAAE;AAGR,wBACI;AAAM,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,YAAX,CAAwB,KAAKJ,QAA7B,CAAhB;AAAyD,MAAA,SAAS,EAAC,eAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKR,WAApC;AAAiD,MAAA,KAAK,EAAG,aAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,MAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,CADJ;AAOC;;AA1CmC;;AA6CxC,MAAMa,QAAQ,GAAGJ,UAAU,IAAI;AAE3B,QAAMK,MAAM,GAAE,EAAd;;AAEA,MAAG,CAACL,UAAU,CAACM,KAAf,EAAqB;AACjBD,IAAAA,MAAM,CAACC,KAAP,GAAa,oBAAb;AACH;;AAED,MAAG,CAACN,UAAU,CAACO,WAAf,EAA2B;AAEvBF,IAAAA,MAAM,CAACE,WAAP,GAAmB,0BAAnB;AACH;;AAED,SAAOF,MAAP;AAIH,CAjBD;;AAmBA,eAAelB,SAAS,CAAC;AACrBqB,EAAAA,IAAI,EAAE,YADe;AACFJ,EAAAA;AADE,CAAD,CAAT,CAEZf,UAFY,CAAf","sourcesContent":["import React from 'react';\nimport {Field, reduxForm} from 'redux-form';\nimport {connect} from 'react-redux';\n\n\nclass StreamForm extends React.Component{\n\n    renderError({error,touched})\n{\n\n  \n    if(touched&&error){\n        return (\n            <div className=\"ui error message\">\n                <div className=\"header\">{error}</div>\n            </div>\n\n        );\n    }\n\n}\nrenderInput = ({input, label, meta}) =>  {\n\n    const className=`field ${meta.error&&meta.touched? 'error' : ''}`\n    return (\n        <div className = {className}> \n        \n            <label>{label}</label>\n        <input{...input} autoComplete=\"off\"/>\n        <div>{this.renderError(meta)}</div>\n        </div>\n        );\n}\n\nonSubmit = formValues =>  {\nthis.props.onSubmit(formValues);\n}\n    render(){\n\n\n    return (\n        <form onSubmit={this.props.handleSubmit(this.onSubmit) } className=\"ui form error\">\n            <Field name=\"title\" component={this.renderInput} label = \"Enter Title\"/>\n            <Field name=\"description\" component={this.renderInput} label=\"Enter Description\" />\n            <button className=\"ui button primary\">Submit</button>\n        </form>\n    )\n    }\n}\n\nconst validate = formValues => {\n\n    const errors= {};\n\n    if(!formValues.title){\n        errors.title=\"must enter a title\";\n    }\n\n    if(!formValues.description){\n\n        errors.description=\"must enter a description\";\n    }\n\n    return errors;\n\n\n\n}\n\nexport default reduxForm({\n    form: 'StreamForm',validate\n})(StreamForm);\n"]},"metadata":{},"sourceType":"module"}