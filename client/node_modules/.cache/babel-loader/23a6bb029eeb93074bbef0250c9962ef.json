{"ast":null,"code":"var _jsxFileName = \"/Users/peng2017/Desktop/training/react/streamer/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport { createStream } from '../../actions';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }\n      }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }\n      }, this.renderError(meta)));\n    };\n\n    this.onSubmit = formValues => {\n      this.props.createStream(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ui error message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 17\n        }\n      }, error));\n    }\n  }\n\n  render() {\n    console.log(\"logging state  \" + this.props.state);\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"must enter a description\";\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: 'StreamCreate',\n  validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream\n})(formWrapped);","map":{"version":3,"sources":["/Users/peng2017/Desktop/training/react/streamer/client/src/components/streams/StreamCreate.js"],"names":["React","connect","Field","reduxForm","createStream","StreamCreate","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","render","console","log","state","handleSubmit","validate","errors","title","description","formWrapped","form"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport {createStream} from '../../actions';\n\nclass StreamCreate extends React.Component{\n\n    renderError({error,touched})\n{\n\n  \n    if(touched&&error){\n        return (\n            <div className=\"ui error message\">\n                <div className=\"header\">{error}</div>\n            </div>\n\n        );\n    }\n\n}\nrenderInput = ({input, label, meta}) =>  {\n\n    const className=`field ${meta.error&&meta.touched? 'error' : ''}`\n    return (\n        <div className = {className}>\n            <label>{label}</label>\n        <input{...input} autoComplete=\"off\"/>\n        <div>{this.renderError(meta)}</div>\n        </div>\n        );\n}\n\nonSubmit = formValues =>  {\nthis.props.createStream(formValues);\n}\n    render(){\n\nconsole.log(\"logging state  \"+ this.props.state);\n    return (\n        <form onSubmit={this.props.handleSubmit(this.onSubmit) } className=\"ui form error\">\n            <Field name=\"title\" component={this.renderInput} label = \"Enter Title\"/>\n            <Field name=\"description\" component={this.renderInput} label=\"Enter Description\" />\n            <button className=\"ui button primary\">Submit</button>\n        </form>\n    )\n    }\n}\n\nconst validate = formValues => {\n\n    const errors= {};\n\n    if(!formValues.title){\n        errors.title=\"must enter a title\";\n    }\n\n    if(!formValues.description){\n\n        errors.description=\"must enter a description\";\n    }\n\n    return errors;\n\n\n\n}\n\nconst formWrapped = reduxForm({\n    form: 'StreamCreate',validate\n})(StreamCreate);\n\nexport default connect (null, {createStream}) (formWrapped);"]},"metadata":{},"sourceType":"module"}