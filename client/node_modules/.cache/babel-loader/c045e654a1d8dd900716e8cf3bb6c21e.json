{"ast":null,"code":"var _jsxFileName = \"/Users/peng2017/Desktop/training/react/streamer/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"field\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 13\n        }\n      }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 9\n        }\n      }, this.renderError(meta)));\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ui error message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 17\n        }\n      }, error));\n    }\n  }\n\n  onSubmit(formValues) {\n    console.log(formValues);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"must enter a description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'StreamCreate',\n  validate\n})(StreamCreate);","map":{"version":3,"sources":["/Users/peng2017/Desktop/training/react/streamer/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","Component","renderInput","input","label","meta","renderError","error","touched","onSubmit","formValues","console","log","render","props","handleSubmit","validate","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA0C;AAAA;AAAA;;AAAA,SAc1CC,WAd0C,GAc5B,CAAC;AAACC,MAAAA,KAAD;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAD,KAA0B;AACpC,0BACI;AAAK,QAAA,SAAS,EAAG,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQD,KAAR,CADJ,eAEA,+CAAUD,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,KAAKG,WAAL,CAAiBD,IAAjB,CAAN,CAHA,CADJ;AAOH,KAtByC;AAAA;;AAEtCC,EAAAA,WAAW,CAAC;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP,GAAD,EACf;AACI,QAAGA,OAAO,IAAED,KAAZ,EAAkB;AACd,0BACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBA,KAAzB,CADJ,CADJ;AAMH;AAEJ;;AAWDE,EAAAA,QAAQ,CAACC,UAAD,EAAY;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACC;;AACGG,EAAAA,MAAM,GAAE;AAGR,wBACI;AAAM,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKN,QAA7B,CAAhB;AAAyD,MAAA,SAAS,EAAC,SAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKP,WAApC;AAAiD,MAAA,KAAK,EAAG,aAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,MAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,CADJ;AAOC;;AArCqC;;AAwC1C,MAAMc,QAAQ,GAAGN,UAAU,IAAI;AAE3B,QAAMO,MAAM,GAAE,EAAd;;AAEA,MAAG,CAACP,UAAU,CAACQ,KAAf,EAAqB;AACjBD,IAAAA,MAAM,CAACC,KAAP,GAAa,oBAAb;AACH;;AAED,MAAG,CAACR,UAAU,CAACS,WAAf,EAA2B;AAEvBF,IAAAA,MAAM,CAACE,WAAP,GAAmB,0BAAnB;AACH;;AAED,SAAOF,MAAP;AAIH,CAjBD;;AAmBA,eAAelB,SAAS,CAAC;AACrBqB,EAAAA,IAAI,EAAE,cADe;AACAJ,EAAAA;AADA,CAAD,CAAT,CAEZhB,YAFY,CAAf","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends React.Component{\n\n    renderError({error,touched})\n{\n    if(touched&&error){\n        return (\n            <div className=\"ui error message\">\n                <div className=\"header\">{error}</div>\n            </div>\n\n        );\n    }\n\n}\nrenderInput = ({input, label, meta}) => {\n    return (\n        <div className = \"field\">\n            <label>{label}</label>\n        <input{...input}/>\n        <div>{this.renderError(meta)}</div>\n        </div>\n        )\n}\n\nonSubmit(formValues){\nconsole.log(formValues);\n}\n    render(){\n\n\n    return (\n        <form onSubmit={this.props.handleSubmit(this.onSubmit) } className=\"ui form\">\n            <Field name=\"title\" component={this.renderInput} label = \"Enter Title\"/>\n            <Field name=\"description\" component={this.renderInput} label=\"Enter Description\" />\n            <button className=\"ui button primary\">Submit</button>\n        </form>\n    )\n    }\n}\n\nconst validate = formValues => {\n\n    const errors= {};\n\n    if(!formValues.title){\n        errors.title=\"must enter a title\";\n    }\n\n    if(!formValues.description){\n\n        errors.description=\"must enter a description\";\n    }\n\n    return errors;\n\n\n\n}\n\nexport default reduxForm({\n    form: 'StreamCreate',validate\n})(StreamCreate);"]},"metadata":{},"sourceType":"module"}